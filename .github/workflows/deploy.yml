name: Deploy to EC2

on:
    push:
        branches:
            - main  # 메인 브랜치 푸시 시 실행

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            # 1. 소스코드 체크아웃
            - name: Checkout code
              uses: actions/checkout@v2

            # 2. 프로젝트 빌드
            - name: Build application
              env:
                  APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
              run: |
                  # src/main/resources 디렉토리 생성 (존재하지 않을 경우)
                  mkdir -p src/main/resources
    
                  # echo 실행 중 오류가 발생해도 민감한 정보가 로그에 남지 않도록 처리
                  set -o pipefail
                  
                  # 프로젝트에 application.properties 추가
                  echo "$APPLICATION_PROPERTIES" > src/main/resources/application.properties
                  
                  # application.properties에 대한 권한 제한
                  chmod 600 src/main/resources/application.properties
                  
                  # gradlew에 실행 권한 부여
                  chmod +x ./gradlew
                  
                  # 프로젝트 빌드
                  echo "Building application..."
                  ./gradlew clean build
                  
                  # 빌드 성공 후, application.properties 삭제
                  rm -f src/main/resources/application.properties

            # 3. Docker 이미지 빌드 및 푸시
            - name: Build and Push Docker Image
              env:
                  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
                  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
              run: |
                  echo "Building Docker Image..."
                  docker build -t my-docker-repo/moment-backend-server:latest .
                  echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                  docker push teniuscom/moment-backend-server:latest

            # 4. docker-compose.yml 파일 EC2로 전송
            - name: Upload Docker Compose to EC2
              env:
                  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}    # 비밀 키를 Github Secrets에 저장해 두어야 합니다.
                  EC2_USER: ${{ secrets.EC2_USER }}                  # EC2 사용자 이름
                  EC2_HOST: ${{ secrets.EC2_HOST }}                  # EC2 호스트 (IP 주소 또는 도메인)
              run: |
                  echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
                  chmod 600 private_key.pem
                  
                  # Docker Compose 파일 전송
                  scp -i private_key.pem -o StrictHostKeyChecking=no docker-compose.yml $EC2_USER@$EC2_HOST:/home/ubuntu

            # 5. EC2에서 Docker Compose 실행
            - name: Deploy on EC2
              env:
                  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
                  EC2_USER: ${{ secrets.EC2_USER }}
                  EC2_HOST: ${{ secrets.EC2_HOST }}
              run: |
                  # EC2 key pair 준비
                  echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
                  chmod 600 private_key.pem
                  
                  # SSH로 EC2 접속 및 Docker Compose 실행
                  # EOF -> Here Document 블록
                  ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
                  cd /home/ubuntu/moment
                  
                  # docker-compose.yml에 정의된 모든 Image를 DockerHub에서 pull
                  echo "Pulling latest Docker images..."
                  docker-compose pull
                  
                  # 기존에 실행 중이던 Container 삭제  
                  echo "Stopping existing containers..."
                  docker-compose down || true
                  
                  # pull 받아온 이미지로 새로운 Container 생성
                  echo "Starting new containers..."
                  docker-compose up -d
                  
                  echo "Application deployed successfully!"
                  EOF
